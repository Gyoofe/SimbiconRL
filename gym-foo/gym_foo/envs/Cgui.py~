import wx
import sys
import pydart2 as pydart
import numpy as np
import cMat
import SimbiconController as SC

from wx import glcanvas

from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

import threading
import time


class GuiBase(glcanvas.GLCanvas):
    def __init__(self, parent, sim, controller):
        glcanvas.GLCanvas.__init__(self, parent, -1)
        self.init = False

        self.sim = sim
        self.controller = controller

        #TODO::initial Mouse Postition

        #
        self.size = None
        self.context = glcanvas.GLContext(self)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBackground)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_LEFT_DOWN, self.OnMouseDown)
        self.Bind(wx.EVT_LEFT_UP, self.OnMouseUP)

        self.timer = wx.Timer(self, 10)
        self.Bind(wx.EVT_TIMER, self.TimerEvent)

        self.timer.Start(10)
        

    def OnEraseBackground(self,event):
        pass

    def OnSize(self, event):
        size = self.size = self.GetClientSize()

        if self.init:
            self.SetCurrent(self.context)
            glViewport(0,0, size.width, size.height)
        event.Skip()

    def OnPaint(self, event):
        self.SetCurrent(self.context)
        if not self.init:
            self.InitGL()
            self.init = True
        self.OnDraw()

    def OnMouseDown(self, event):
        return

    def OnMouseUP(self,event):
        return

    def TimerEvent(self, event):
        self.TimerFunc()
    
    def TimerFunc(self):
        print("parents...")
        return


class dartGui(GuiBase):
    def InitGL(self):
        
        # set viewing projection
        glMatrixMode(GL_PROJECTION)
        glFrustum(-0.5, 0.5, -0.5, 0.5, 1.0, 3.0)

        # position viewer
        glMatrixMode(GL_MODELVIEW)
        glTranslatef(0, 0, -2.0)
        gluLookAt(0.5,0.0,0.5,0,0,0,0,1,0)
        # position object
        #glRotatef(self.y, 1.0, 0.0, 0.0)
        #glRotatef(self.x, 0.0, 1.0, 0.0)

        glEnable(GL_DEPTH_TEST)
        #glEnable(GL_LIGHTING)
        #glEnable(GL_LIGHT0)
        #glutTimerFunc(1000, self.Timer, 0)



    def OnDraw(self):
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)



        bodyGround = self.sim.skeletons[0]
        rootnode = bodyGround.root_bodynodes()
        for i in rootnode:
            self.drawBody(i)
        #self.SwapBuffers()
        
        bodySkel = self.sim.skeletons[1]

        rootnode = bodySkel.root_bodynodes()
        #self.drawingBox(exambodynode[0].child_bodynodes[0])

        for i in rootnode:
            self.drawBody(i)
        self.SwapBuffers()

    def drawBody(self,root):
        
        self.drawingBox(root)

        for i in root.child_bodynodes:
            self.drawBody(i)

    def drawingBox(self,body):
        shapelen = body.num_shapenodes()
        _trans = body.transform()

        for i in body.shapenodes:
            _shape = i.shape
            s_min = cMat.Matrix.multTrans(_trans,_shape.bounding_box()[0])
            s_max = cMat.Matrix.multTrans(_trans,_shape.bounding_box()[1])

            x = s_min[0]
            y = s_min[1]
            z = s_min[2]

            p = s_max[0]
            q = s_max[1]
            r = s_max[2]

            v1 = s_min
            v2 = (p,y,z)
            v3 = (x,q,z)
            v4 = (p,q,z)

            v5 = (x,y,r)
            v6 = (p,y,r)
            v7 = (x,q,r)
            v8 = s_max

            glBegin(GL_QUADS)
            
            glNormal3fv(cMat.Matrix.getNormal(v1,v2,v3))
            glVertex3fv(v1)
            glVertex3fv(v2)
            glVertex3fv(v3)
            glVertex3fv(v4)

            glNormal3fv(cMat.Matrix.getNormal(v1,v3,v7)) 
            glVertex3fv(v1)
            glVertex3fv(v3)
            glVertex3fv(v7)
            glVertex3fv(v5)

            glNormal3fv(cMat.Matrix.getNormal(v1,v2,v6))
            glVertex3fv(v1)
            glVertex3fv(v2)
            glVertex3fv(v6)
            glVertex3fv(v5)

            glNormal3fv(cMat.Matrix.getNormal(v2,v4,v8))
            glVertex3fv(v2)
            glVertex3fv(v4)
            glVertex3fv(v8)
            glVertex3fv(v6)

            glNormal3fv(cMat.Matrix.getNormal(v3,v4,v8))
            glVertex3fv(v3)
            glVertex3fv(v4)
            glVertex3fv(v8)
            glVertex3fv(v7)

            glNormal3fv(cMat.Matrix.getNormal(v5,v6,v8))
            glVertex3fv(v5)
            glVertex3fv(v6)
            glVertex3fv(v8)
            glVertex3fv(v7)

            glEnd()


    def TimerFunc(self,):
        #print("TImer....")
        #self.controller.update()
        #self.sim.step()

        #glutPostRedisplay()
        #self.OnDraw()
        self.Refresh()
        #time.sleep(10)


class wxPythonThread(threading.Thread):
    def __init__(self,app):
        self.app = app
        threading.Thread.__init__(self)
    def run(self):
        self.app = app
        self.app.MainLoop()
        #time.sleep(1)
    def stop(self):
        self.app.ExitMainLoop()


skel_path="/home/qfei/dart/data/sdf/atlas/"

if __name__ == '__main__':
    pydart.init()

    world = pydart.World(1/1000)


    ground = world.add_skeleton(skel_path+"ground.urdf")
    atlas = world.add_skeleton(skel_path+"atlas_v3_no_head_soft_feet.sdf");

    skel = world.skeletons[1]

    q = skel.q
    q[0] = -0.5*np.pi
    q[4] = q[4]+0.01
    skel.set_positions(q)

    controller = SC.Controller(skel,world)

    app = wx.App(0)

    frame = wx.Frame(None, -1, size=(1200,960))
    gui = dartGui(frame,world,controller)
    frame.Show(True)

    #app.MainLoop()

    gui = wxPythonThread(app)
    gui.start()
    #gui.join()

    print("do something")
    a = input("aa: ")

    for _ in range(3000):
        controller.update()
        world.step()

    gui.stop()


